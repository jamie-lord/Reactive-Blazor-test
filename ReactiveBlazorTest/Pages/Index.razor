@page "/"

@using Mapster

@inject Services.PersonService PersonService
@inject Services.UpdateObservable UpdateObservable

<h1>Hello, world!</h1>

<EditForm Model="@_person">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<InputText id="first-name" @bind-Value="_person.FirstName" />
	<InputText id="last-name" @bind-Value="_person.LastName" />
	<InputDate id="created" @bind-Value="_person.Created" />

</EditForm>

<p>@_sessionId</p>
<p>@_person.FirstName</p>
<p>@_person.LastName</p>
<p>@_person.Created</p>

<p>Connected clients: @UpdateObservable.NumberOfSubscriptions()</p>

<button @onclick="Update">Set date to now</button>

<h2>Updates</h2>

<ul>
	@foreach (var updateEvent in _updateEvents.OrderByDescending(x => x.Key))
	{
	 <li>@updateEvent.Key @updateEvent.Value</li>
	}
</ul>

@code
{
	private Services.Person _person;
	private readonly Guid _sessionId = Guid.NewGuid();
	private Services.UpdateObserver _observer;
	private List<KeyValuePair<DateTime, string>> _updateEvents = new();

	protected override async Task OnInitializedAsync()
	{
		_person = await PersonService.Get(_sessionId, 1);
		_person.PropertyChanged += OnPersonChanged;
		_observer = new Services.UpdateObserver(UpdateObservable, 1, OnPersonUpdated);
	}

	private async void OnPersonChanged(object sender, EventArgs args)
	{
		Console.WriteLine($"{DateTime.Now}\t{_sessionId}\tIndex.OnPersonChanged()");
		if (!_stopSave)
		{
			await PersonService.Update(_sessionId, _person);
		}
		else
		{
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
	}

	private async Task Update()
	{
		if (_stopSave)
		{
			return;
		}

		Console.WriteLine($"{DateTime.Now}\t{_sessionId}\tIndex.Update()");
		_person.Created = DateTime.Now;
	}

	private bool _stopSave;

	private void OnPersonUpdated(Services.UpdateEvent updateEvent)
	{
		_updateEvents.Add(new KeyValuePair<DateTime, string>(DateTime.Now, Newtonsoft.Json.JsonConvert.SerializeObject(updateEvent)));

		if (updateEvent.SessionId == _sessionId)
		{
			return;
		}

		if (updateEvent.Person.Id == _person.Id)
		{
			if (updateEvent.Person.FirstName != _person.FirstName || updateEvent.Person.LastName != _person.LastName || updateEvent.Person.Created != _person.Created)
			{
				Console.WriteLine($"{DateTime.Now}\t{_sessionId}\tIndex.OnPersonUpdated() Updated");
				_stopSave = true;
				updateEvent.Person.Adapt(_person);
				_stopSave = false;
			}
		}
	}

	public void Dispose()
	{
		Console.WriteLine($"{DateTime.Now}\t{_sessionId}\tIndex.Dispose()");
		_observer.Dispose();
		_person.PropertyChanged -= OnPersonChanged;
	}
}